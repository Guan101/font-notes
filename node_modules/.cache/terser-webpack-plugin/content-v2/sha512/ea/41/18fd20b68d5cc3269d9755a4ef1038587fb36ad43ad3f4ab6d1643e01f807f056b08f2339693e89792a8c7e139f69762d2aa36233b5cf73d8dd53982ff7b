{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{265:function(t,s,a){t.exports=a.p+\"assets/img/接口和对象类型01.712bccde.png\"},266:function(t,s,a){t.exports=a.p+\"assets/img/接口和对象类型02.41bd5b69.png\"},278:function(t,s,a){\"use strict\";a.r(s);var r=a(13),n=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[r(\"p\",[t._v(\"这一章主要介绍ts关于对象是如何进行类型声明和约束的\")]),t._v(\" \"),r(\"h3\",{attrs:{id:\"_1、对象的类型\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、对象的类型\"}},[t._v(\"#\")]),t._v(\" 1、对象的类型\")]),t._v(\" \"),r(\"p\",[t._v(\"首先js中，我们可以任意声明一个对象，并且可以对其属性和方法进行添加、读取、删除等操作。\"),r(\"br\"),t._v(\"\\n但是在ts中,我们定义对象的方式要用到 \"),r(\"font\",{attrs:{color:\"#3eaf7c\",size:\"4\"}},[r(\"em\",[r(\"strong\",[t._v(\"interface\")])])]),t._v(\" (接口),我们用它来定义一种约束，使用这个接口的数据的格式都要满足这种约束。\"),r(\"br\"),t._v(\"\\n例如：\")],1),t._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Person\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"name\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"age\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"number\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"obj\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"Person \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"name\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'zhangsan'\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"age\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"18\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),r(\"p\",[t._v(\"上面我们就是定义一个叫Person的约束，它规定的对象结构是：里面有字符串类型的name属性，和number类型的age属性,然后我们声明了一个Person类型的obj对象\"),r(\"br\")]),t._v(\" \"),r(\"p\",[t._v(\"上面这样写是没有问题的，但是假如我们在使用Person接口约束时，定义的对象的属性缺少age属性，那么将会出现以下情况:\"),r(\"br\"),t._v(\" \"),r(\"img\",{attrs:{src:a(265)}})]),t._v(\" \"),r(\"blockquote\",[r(\"p\",[r(\"font\",{attrs:{color:\"#3eaf7c\",size:\"4\"}},[r(\"strong\",[t._v(\"使用接口约束的时候不能多一个属性也不能少一个属性，必须与接口保持一致\")])])],1)]),t._v(\" \"),r(\"h3\",{attrs:{id:\"_2、interface-合并与继承\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、interface-合并与继承\"}},[t._v(\"#\")]),t._v(\" 2、interface 合并与继承\")]),t._v(\" \"),r(\"ul\",[r(\"li\",[t._v(\"当interface重名时，会默认自动合并，如下，我们在给变量x赋值时，满足了name和age两个属性。\")])]),t._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//重名interface  可以合并\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"A\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"name\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"A\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"age\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"number\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"x\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"A\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"name\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'xx'\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"age\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"20\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),r(\"ul\",[r(\"li\",[t._v(\"interface之间的继承\")])]),t._v(\" \"),r(\"p\",[t._v(\"如下，interfaceA\")]),t._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"A\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"name\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"string\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n \\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"B\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"extends\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"A\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"  \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//通过继承将A的属性继承过来\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"age\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"number\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n \\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"let\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"obj\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"B\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"age\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"18\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"name\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"string\"')]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),r(\"h3\",{attrs:{id:\"_3、interface中定义一个可选属性\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3、interface中定义一个可选属性\"}},[t._v(\"#\")]),t._v(\" 3、interface中定义一个可选属性\")]),t._v(\" \"),r(\"p\",[t._v(\"我们前面介绍了，当接口里约定了某些属性后，我们后面依据这个接口定义的对象是不能多或少任一个属性的，\\n但是如果有些属性，我们不确定它是否真的存在或需要的话，我们就需要用到可选属性，\\n将接口内的某个属性通过 ？操作符定义为可选属性\")]),t._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//可选属性的含义是该属性可以不存在\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Person\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    b\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"    \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//表示b属性可以不存在\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"a\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"string\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n \\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"person\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"Person  \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"a\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"213\"')]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),r(\"h3\",{attrs:{id:\"_4、任意属性-propname-string\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4、任意属性-propname-string\"}},[t._v(\"#\")]),t._v(\" 4、任意属性[propName: string]\")]),t._v(\" \"),r(\"p\",[t._v(\"需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：\")]),t._v(\" \"),r(\"p\",[t._v(\"在下面的demo中，我们用Q声明的变量obj，添加了新的属性c并没有报错，\\n这是因为我们在Q中定义了[propName: string]: any;\")]),t._v(\" \"),r(\"p\",[t._v(\"它允许我们添加新的任意属性(属性的数据类型还是要与之前我们定义的[propName: string]: any保持一致的)\")]),t._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Q\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    b\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"a\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"propName\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" any\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n \\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"obj\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"Q\")]),t._v(\"  \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"a\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"213\"')]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"c\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"123\"')]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),r(\"h3\",{attrs:{id:\"_5、只读属性-readonly\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5、只读属性-readonly\"}},[t._v(\"#\")]),t._v(\" 5、只读属性 readonly\")]),t._v(\" \"),r(\"p\",[r(\"strong\",[t._v(\"readonly 只读属性  是不允许被赋值的，只能读取\")])]),t._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//属性a是只读的不允许重新赋值\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Int\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    b\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    readonly a\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"propName\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" any\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n \\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"obj\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Int \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"a\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"213\"')]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"c\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"123\"')]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\nobj\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"a \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"123\")]),t._v(\"    \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//会报错，如下图\")]),t._v(\"\\n\")])])]),r(\"img\",{attrs:{src:a(266)}}),t._v(\" \"),r(\"h3\",{attrs:{id:\"_6、添加函数\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6、添加函数\"}},[t._v(\"#\")]),t._v(\" 6、添加函数\")]),t._v(\" \"),r(\"div\",{staticClass:\"language-js extra-class\"},[r(\"pre\",{pre:!0,attrs:{class:\"language-js\"}},[r(\"code\",[r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Int\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    b\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    readonly a\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"[\")]),t._v(\"propName\"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" string\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"]\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" any\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"fn\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"void\")]),t._v(\"          \"),r(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//定义了函数fn\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"obj\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Int \"),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"a\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"213\"')]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token literal-property property\"}},[t._v(\"c\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),r(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"123\"')]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token function-variable function\"}},[t._v(\"fn\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),r(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=>\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        console\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),r(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"log\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),r(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"123\")]),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\n    \"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),r(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),r(\"blockquote\",[r(\"p\",[t._v(\"总结：\")]),t._v(\" \"),r(\"blockquote\",[r(\"ul\",[r(\"li\",[t._v(\"这一章我们学习了ts中约束对象的接口定义后，一般情况下我们在根据这个接口定义对象时，数据的格式要满足这种约束，不能多或者少\")]),t._v(\" \"),r(\"li\",[t._v(\"接口可以通过extends继承、；\")]),t._v(\" \"),r(\"li\",[t._v(\"通过？操作符定义接口中某个属性为可选属性；\")]),t._v(\" \"),r(\"li\",[t._v(\"给接口添加[propName:string]:any 使得我们可以添加新的任意属性；\")]),t._v(\" \"),r(\"li\",[t._v(\"属性名前添加readonly 来规定只读属性\")]),t._v(\" \"),r(\"li\",[t._v(\"添加函数\")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);","extractedComments":[]}